Optimization with stack:
We can get the min/max of a stack with the following:
contain 2 stacks, one storing the numbers, and one storing the min value
For example:
numbers: 9 2 1 5 3 0 2
min/max: 9 2 1 1 1 0 0
this way, history is maintained. When we push a number into the stack, we push min/max(min/max num, number) into the min/max stack.
Whenever we pop a number from the stack, we also pop the last number from the min/max stack. This way, we can always get the desired min/max number. 
This way, we can get o(1) instead of the usual o(logn)

Editor hdoj4699

at first glance, I don't have a clear idea

I like the direct simulation approach of this problem
maintain 2 stacks, one for all numbers left of the cursor and one for all numbers right of the cursor
operation 1: insert x into left stack, updte maximum prefix sum = max(f[cursor_pos-1], a[cursor_pos]) where a[cursor_pos] = a[cursor_pos-1]+x;
operation 2: pop the left stack once
operation 3: pop the left stack once, get the popped number, push it into the right stack
operation 4: pop the right stack once, get popped number, push it into the left stack. Then, do operation 1 without insertion. 
operation 5: print(f[k])

O(1) for each operation
Pretty simple simulation + update tbh, I just got stuck on coming up a method to insert middle elements then get the prefix sum.

problem 2:
dp
1-N numbersin stack problem: catalan num 0x36

math order of operations with stack
A op B

3 * (1-2) = -3

Post fix: A B op

1 2 - 3 * = -3

to figure out A B op, we do the following with a stack:
When we reach a number, we push it into the stack
When we reach an operation, we pop the last two numbers, then push A op B back into the stack
After scanning, the number in the queue will be the answer



#include <bits/stdc++.h>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template<typename T>
using orderedMultiset = tree<T ,null_type,std::less_equal<T>, rb_tree_tag,tree_order_statistics_node_update>;
typedef long long ll;
typedef pair<int, int> pi;
typedef vector<int> vi;
#define f first
#define s second
#define pb push_back
#define rep(i, a, b) for(int i = a; i < (b); ++i) 
#define all(x) (x).begin(), (x).end()
ll MOD = 1000000007;

int main() {
	string s;
	cin>>s;
	stack <int> st;
	string lol = "+-*/";
	rep(i,0,s.size()){
		int ok = s[i]-'0';
		if(ok < 0){
			if(s[i] == '*'){
				int a = st.top();
				st.pop();
				int b = st.top();
				st.pop();
				st.push(a*b);
			}
			else if(s[i] == '/'){
				int a = st.top();
				st.pop();
				int b = st.top();
				st.pop();
				st.push(b/a);
			}
			else{
				if(s[i] == '+'){
					int a = st.top();
					st.pop();
					int b = st.top();
					st.pop();
					st.push(a+b);
				}
				else{
					int a = st.top();
					st.pop();
					int b = st.top();
					st.pop();
					st.push(b-a);
				}
				
			}
		} 
		else{
			st.push(s[i]-'0');
		}
	}
	cout<<st.top()<<endl;
}



We can convert A op B to A B op with the following:
When we reach a number, output that number
When we reach a left brackert we push it into the stack
When we reach a right bracket, we output every operation in the stack and pop it until we pop the left bracket
When we reach an operand, we output all numbers that have more or equal value than that operand */ > +-, then we push the operand into the stack

#include <bits/stdc++.h>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template<typename T>
using orderedMultiset = tree<T ,null_type,std::less_equal<T>, rb_tree_tag,tree_order_statistics_node_update>;
typedef long long ll;
typedef pair<int, int> pi;
typedef vector<int> vi;
#define f first
#define s second
#define pb push_back
#define rep(i, a, b) for(int i = a; i < (b); ++i) 
#define all(x) (x).begin(), (x).end()
ll MOD = 1000000007;

int main() {
	string s;
	cin>>s;
	stack <int> st;
	string lol = "+-*/";
	rep(i,0,s.size()){
		int ok = s[i]-'0';
		if(ok < 0){
			if(s[i]=='('){
				st.push(-1);
			}
			else if(s[i] == ')'){
				while(st.size() > 0 && st.top() != -1){
					cout<<lol[st.top()];
					st.pop();
				}
				st.pop();
			}
			else if(s[i] == '*'){
				int val = 2;
				while(st.size() > 0 && st.top() >=val){
					cout<<lol[st.top()];
					st.pop();
				}
				st.push(val);
			}
			else if(s[i] == '/'){
				int val = 3;
				while( st.size() > 0 && st.top() >=val){
					cout<<lol[st.top()];
					st.pop();
				}
				st.push(val);
			}
			else{
				if(s[i] == '+'){
					int val = 0;
					while(st.size() > 0 && st.top() >=val){
						cout<<lol[st.top()];
						st.pop();
					}
					st.push(val);
				}
				else{
					int val = 1;
					while(st.size() > 0 && st.top() >=val){
						cout<<lol[st.top()];
						st.pop();
					}
					st.push(val);
				}
				
			}
		} 
		else{
			cout<<s[i]-'0';
		}
	}
	while(st.size() > 0 ){
		cout<<lol[st.top()];
		st.pop();
	}
}




Largest Rectangle in a Histogram poj2559 https://www.acwing.com/problem/content/133/
Im thinking about binary search
maybe two pointers would also be viable
sol:
Maintain a pair stack, for every number, check if its bigger than the top height of the stack.
If it is, push {the number,1} into the stack. 
If it isn't do the following:
the number of rectangles = 0
While the top number is bigger than the stack and the stack size > 0
num of rectangles+=stack.top().second
ans = max(ans, numofrectangles * height of the top number);
stack.pop()

#include <bits/stdc++.h>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template<typename T>
using orderedMultiset = tree<T ,null_type,std::less_equal<T>, rb_tree_tag,tree_order_statistics_node_update>;
typedef long long ll;
typedef pair<int, int> pi;
typedef vector<int> vi;
#define f first
#define s second
#define pb push_back
#define rep(i, a, b) for(int i = a; i < (b); ++i) 
#define all(x) (x).begin(), (x).end()
ll MOD = 1000000007;

int main() {
	int n;

	while(true){
		cin>>n;
		if(n== 0){
			break;
		}
		vi v;
		stack <pi> st;
		rep(i,0,n){
			int u;
			cin>>u;
			v.pb(u);

		}
		ll ans = 0;
		int prev = -1;
		rep(i,0,n){
			if(v[i] >= prev){
				st.push({v[i],1});
				prev = v[i];
			}
			else{
				ll sum = 0;
				while(st.size() > 0 &&st.top().first > v[i]){
					sum += st.top().second;
					ans = max(ans, 1ll*st.top().first * sum);
					st.pop();
				}
			
				prev = v[i];
				st.push({v[i], sum+1});
			}
		}
		ll sum = 0;
		while(st.size() > 0 ){
					sum += st.top().second;
					ans = max(ans, 1ll*st.top().first * sum);
					st.pop();
				}

		cout<<ans<<endl;


	}
}





m
